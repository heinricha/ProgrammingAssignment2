@@ -1,15 +1,38 @@
## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function
## makeCacheMatrix() creates a special "matrix" object that can cache it's inverse.
## cacheSolve() computes the inverse of the "matrix" returned by the first function (makeCacheMatrix). If the inverse
## has already been calculated and the matrix has not changed, it'll retrieve the inverse from the cache directly.

## This function contains a square (invertable) matrix and contains functions to:
## Set the value of the matrix
## Get the value of the matrix
## Set the value of the inverse
## Get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {

  inv = NULL
  set = function(y) {
    x <<- y
    inv <<- NULL
  }
  get = function() x
  setinv = function(inverse) inv <<- inverse 
  getinv = function() inv
  list(set=set, get=get, setinv=setinv, getinv=getinv)
}


## Write a short comment describing this function
## The cacheSolve function calculates the inverse of the special matrix created with the above function. It also checks
## to see if the inverse has already been calculated. If so, it gets the inverse from the cachematrix and skips the
## calculation.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
  inv = x$getinv()
  if (!is.null(inv)){
    message("getting cached data")
    return(inv)
  }
  mat.data = x$get()
  inv = solve(mat.data, ...)
  x$setinv(inv)
  
  return(inv)
}
